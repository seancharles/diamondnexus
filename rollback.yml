version: 0.2
phases:
  install:
    runtime-versions:
      python: 3.7
    commands:
      - python --version
  pre_build:
    commands:
      - export STARTTIME=`date +%s`
      - export BUILDNAME="$GIT_BRANCH-`date +%Y-%m-%d`"
      - export BRANCH="$GIT_BRANCH"
      - export SOURCE_VERSION="$CODEBUILD_SOURCE_VERSION"
      - export FUNCTION_NAME="$LAMBDA_TO_UPDATE"
      - export username="$GITUSER"
      - export pass="$GITPASSWORD"
      - echo "BRANCH $BRANCH"
      - echo "SOURCE_VERSION $SOURCE_VERSION"
      - export task="$Taskid"
      - export accountId="$account"
      - export snstopic="$sns"
      - aws --version
      - $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)
      - IMAGE_TAG=build-$(git rev-parse HEAD)
      - export efsid="$efs_standby"
      - export datasyncsg="$securitygroup"
      - export subnetid="$subnetId"
  build:
    commands:
      - echo Build started on `date`
      - curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -
      - apt-get -y update
      - apt-get install -y nfs-common
      - echo Cloning remote GIT repo
      - git log --name-status HEAD^..HEAD
      - echo Building the Docker image...
      - docker build -t magento --cache-from magento:latest --build-arg REDIS_HOST=$redis --REDIS_HOSTTWO=$redistwo --build-arg DB_HOST=$dbhost --build-arg DB_NAME=$dbname --build-arg DB_USER=$dbuser --build-arg DB_ROOT_PASSWORD=$dbrootpassword --build-arg VARNISH_HOST=$varnishhost --build-arg RABBIT_HOST=$rabbithost --build-arg RABBIT_VHOST=$rabbitvhost --build-arg RABBIT_USER=$rabbituser --build-arg RABBIT_PASSWORD=$rabbitpassword --build-arg MAG_NAME=$magname --build-arg ELASTICSEARCH7_SERVER_HOSTNAME=$elasticsearchserverhostname --build-arg ELASTICSEARCH7_ENGINE=$catalogsearchengine --build-arg ELASTICSEARCH7_SERVER_PORT=$elasticsearchserverport --build-arg CRYPT=$CRYPT --build-arg MAG_ENV=$MAGENV --build-arg MAGENTO=$MAGENTO --build-arg NGINX_HOST=$NGINXHOST --build-arg VARNISH_BACKEND_HOST=$VARNISHBACKENDHOST --build-arg VARNISH_ACCESS_LIST=$VARNISHACCESSLIST --build-arg ADMIN_URL=$ADMINURL --build-arg DN_BASE_URL=$DNBASEURL --build-arg FA_BASE_URL=$FABASEURL --build-arg TF_BASE_URL=$TFBASEURL --build-arg BUILD=prod --build-arg RESOLVER=$RESOLVER WP_ENV=$WP_ENV .
      - docker tag magento:latest $REPOURL/magento:latest
      - docker tag magento:latest $REPOURL/magento:$IMAGE_TAG
      - docker images 
      - docker create magento
      - CONTAINER=$(docker ps -a | grep magento | awk '{print $1}')
      - docker ps -a 
      - echo $CONTAINER
      - mkdir nfsmount
      - mount -t nfs -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport $MOUNTNFS:/ ./nfsmount/
      - docker cp -a $CONTAINER:/var/www/magento/pub/static/ ./nfsmount/magento/pub/
      - chown 1000:1000 -R ./nfsmount/magento/pub/static/
      - sleep 3
      - echo Pushing the Docker images...
      - docker push $REPOURL/magento:latest
      - docker push $REPOURL/magento:$IMAGE_TAG
      - aws sns publish --topic-arn $snstopic --message "datasync perfomed"
  post_build:
    commands:
      - echo Build completed on `date`
artifacts:
  files:
    - '**/*'
